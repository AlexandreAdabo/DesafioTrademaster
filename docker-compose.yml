version: '3.8'

services:
  # Serviço PostgreSQL
  postgres_db:
    image: postgres:15
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # (Opcional) Scripts SQL iniciais
    networks:
      - ecommerce-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ecommerce_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"   # Porta AMQP
      - "15672:15672" # Porta da UI de administração
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - ecommerce-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço da API (E-commerce)
  ecommerce_api:
    build:
      context: .  # Assume que o Dockerfile está na raiz do projeto
      dockerfile: Dockerfile
    container_name: ecommerce_api
    ports:
      - "3000:3000"
    env_file:
      - .env  # Arquivo com variáveis como RABBITMQ_URL e DATABASE_URL
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_db:
        condition: service_healthy
    networks:
      - ecommerce-net

# Redes e Volumes
networks:
  ecommerce-net:
    driver: bridge

volumes:
  postgres_data: